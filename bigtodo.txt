//Up Msgs
//init - 
//	 gets a player id
//	 read the hashmap for a player
//	 get the world the player is in, fetch it
//	 return the world and the player to the client
//	 render

//move
//	gets a player id and a target location
//	gets the world the player is currently in
//	runs a path find to the target
//	per pulse sends new positions to all players who can see player
//	when the player clicks, really his origin changes ala origin seeker


//attack
//	gets a player id and a target location
//	gets the world the player is currently in
//	verifies the reach to the target, calculates hit

//On Server
//pulse
//	update paths + actions for beasts
//	track npcs in the world, state + position


//change
//	change state of a sprint
//	should be sent only to visible clients

//add
//	like init, but adds a sprite only (another player joins, new npc)

//remove
//	like add, but remove a sprite only (another player leaves, dead npc)

//Sharding
//All node instances (tcserver) must subscribe to specific changes/events on the redis servers
//All calls to sendupdateall must only go to players that could "see" the changes

**General
Need background soundtrack
Need to be able to swap bg soundtrack
Chains need to be by state + direction. Right now if your sprite sheet is the same for all directions + states then chain works.
-> however, given something like say, the werewolf sprite, that has multiple sheets, you couldn't use chain the way it is now to 
-> to build a composite sprite because when werewolf goes from state a to state b, you have no way to specify a chain b.
Need general event handlers - ie - decouple the sprite from the event.
tileexp - player walks, origin moves
tileexp - player walks, origin moves, Z's follow
tileexp - phealth, zhealth, collisions?

-> pathfinding is fuck tarded, include diagonals
-> How to tie together pathfinding and allow move and blocks?
-> How can movement be very smooth?
-> Holding down mouse should continue to pump events


***World
highlevel editor
lowlevel editor
editor saves to redis
 
server starts
	loads world into memory

player joins - facebook
	loads player at last quit
	server sends visible chunk

player actions
	action sent to server
	server acts on world
	updates sent to client
	client queues updates, interpolates

world points
	spawner - when plyr is N distance spawns Y npc at rate Z until destroyed or runs out of fuel X
	npc - sprite + behavior




//cells

//sprite locations in relation to the origin

//render a sprite inventory

//clicking a sprite in the inventory selects it

//mouse down (and hold draws it)

//right mouse down and hold erases

//random gen?

//clicking an npc then clicking a cell highlights it, the path and then the npc walks it.

//character creator - flip through diablo 2 assets? not sure.

//persist world into redis



//step 1 skeleton
	//inventory panel
	//main canvas
	//birds eye view? (maybe with highlight)

//step 2 persistance model (maybe first...)

//step 3 bells and whistles




//client	connect

//server - 	register connections
		send world chunk

//client	render world chunk
		start message loop
		process messages
		process user input


//messages
	cell change
		type
		sprite		
	sprite change
		position
		state
		player view change (origin)	
	new chunk



//server entities
	player origin
	gameworld
	sprites
		name
		states
		position
		


//start up
	create a world


[
	cells
]

[
	sprites
	position
	behavior
]

[
	loop
		receives input
		runs sprites
		logs changes
		streams changes 
]

[
	chunk streamer
		checks the location of the change
		streams it to chunks
		translates "movement" into arrival
]